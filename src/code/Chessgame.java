/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package code;

import java.awt.GridLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author Lancelot
 */
public class Chessgame extends javax.swing.JFrame {

    
    public static Chessboard mainChessboard;
    public final static int SIZE = 8;
    public static String currentPlayer = "human";
    
    public Chessgame() {
        initComponents();
        
        // Center the app at the middle of the screen
        setLocationRelativeTo(null);
        
        GridLayout gridLayout = new GridLayout(SIZE, SIZE);
        chessboardLabel.setLayout(gridLayout);
        
        mainChessboard = new Chessboard(false);//chessboardLabel);
        refresh();
    }

    public static void refresh() {
        chessboardLabel.removeAll();
        
        for (int y=0; y<Chessgame.SIZE; y++) {
            for (int x=0; x<Chessgame.SIZE; x++) {
                if (mainChessboard.getPawnAt(x, y) == null)
                    chessboardLabel.add(new JLabel());
                else
                    chessboardLabel.add(mainChessboard.getPawnAt(x, y));
            } 
        }
        
        chessboardLabel.revalidate();
        chessboardLabel.repaint();
    }
    
    public static void computerTurn() {
        currentPlayer = "computer";
        if (mainChessboard.isInCheckmate("computer")) {
                Chessgame.endGame("human");
                return;
        }
        
        // Minimax algorithm
        mainChessboard = MinimaxAlgorithm.AlphaBetaSearch(mainChessboard);
        refresh();
        
        currentPlayer = "human";
        if (mainChessboard.isInCheckmate("human"))
                Chessgame.endGame("computer");
    }
    
    
    public static void endGame(String winner) {
        int dialogButton = JOptionPane.YES_NO_OPTION;
    
        int result = JOptionPane.showConfirmDialog(null,
        "The "+winner+" won.\n"
        +"Do you want to play again ?",
        "End of the game",
        dialogButton);
        
        if(result == JOptionPane.YES_OPTION) {
            mainChessboard = new Chessboard(false);
            currentPlayer = "human";
            refresh();
        }
        else {
            System.exit(0); 
        }
    }
    
    
    
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chessboardLabel = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chess game");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocation(new java.awt.Point(50, 50));
        setMinimumSize(null);
        setName("MainWindow"); // NOI18N
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(600, 600));
        setResizable(false);
        getContentPane().setLayout(null);

        chessboardLabel.setLocation(new java.awt.Point(15, 15));
        getContentPane().add(chessboardLabel);
        chessboardLabel.setBounds(15, 15, 570, 570);

        background.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        background.setForeground(new java.awt.Color(153, 153, 0));
        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/chessboard.jpg"))); // NOI18N
        background.setText("dsfs");
        background.setMaximumSize(new java.awt.Dimension(600, 600));
        background.setMinimumSize(new java.awt.Dimension(600, 600));
        background.setPreferredSize(new java.awt.Dimension(600, 600));
        background.setSize(new java.awt.Dimension(600, 600));
        getContentPane().add(background);
        background.setBounds(0, 0, 600, 600);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chessgame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chessgame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chessgame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chessgame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chessgame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    public static javax.swing.JLabel chessboardLabel;
    // End of variables declaration//GEN-END:variables
}
